<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="10" passed="9" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-06-04T08:02:48Z" name="Suite" finished-at="2022-06-04T08:04:44Z" duration-ms="115703">
    <groups>
    </groups>
    <test started-at="2022-06-04T08:02:48Z" name="Test" finished-at="2022-06-04T08:04:44Z" duration-ms="115703">
      <class name="uiTests.TestLinks_HomePage">
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.TestLinks_HomePage@4e76dac]" started-at="2022-06-04T10:04:15Z" name="setupMethod" finished-at="2022-06-04T10:04:18Z" duration-ms="3452" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="CheckLinksTest()[pri:0, instance:uiTests.TestLinks_HomePage@4e76dac]" started-at="2022-06-04T10:04:18Z" name="CheckLinksTest" finished-at="2022-06-04T10:04:19Z" duration-ms="866" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckLinksTest -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.TestLinks_HomePage@4e76dac]" started-at="2022-06-04T10:04:19Z" name="cleanUp" finished-at="2022-06-04T10:04:19Z" duration-ms="390" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.TestLinks_HomePage@4e76dac]" started-at="2022-06-04T10:04:19Z" name="setupMethod" finished-at="2022-06-04T10:04:23Z" duration-ms="3628" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="ValidateBrokenLinks()[pri:0, instance:uiTests.TestLinks_HomePage@4e76dac]" started-at="2022-06-04T10:04:23Z" name="ValidateBrokenLinks" finished-at="2022-06-04T10:04:25Z" duration-ms="1763" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateBrokenLinks -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.TestLinks_HomePage@4e76dac]" started-at="2022-06-04T10:04:25Z" name="cleanUp" finished-at="2022-06-04T10:04:25Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
      </class> <!-- uiTests.TestLinks_HomePage -->
      <class name="uiTests.TestSearch_HomePage">
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.TestSearch_HomePage@6273c5a4]" started-at="2022-06-04T10:04:25Z" name="setupMethod" finished-at="2022-06-04T10:04:28Z" duration-ms="3242" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="SearchFieldTest()[pri:0, instance:uiTests.TestSearch_HomePage@6273c5a4]" started-at="2022-06-04T10:04:28Z" name="SearchFieldTest" finished-at="2022-06-04T10:04:43Z" duration-ms="15378" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchFieldTest -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.TestSearch_HomePage@6273c5a4]" started-at="2022-06-04T10:04:43Z" name="cleanUp" finished-at="2022-06-04T10:04:44Z" duration-ms="336" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
      </class> <!-- uiTests.TestSearch_HomePage -->
      <class name="uiTests.ImageTest_HomePage">
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.ImageTest_HomePage@7b139eab]" started-at="2022-06-04T10:04:10Z" name="setupMethod" finished-at="2022-06-04T10:04:14Z" duration-ms="3971" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="CheckImageTest()[pri:0, instance:uiTests.ImageTest_HomePage@7b139eab]" started-at="2022-06-04T10:04:14Z" name="CheckImageTest" finished-at="2022-06-04T10:04:14Z" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckImageTest -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.ImageTest_HomePage@7b139eab]" started-at="2022-06-04T10:04:14Z" name="cleanUp" finished-at="2022-06-04T10:04:15Z" duration-ms="319" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
      </class> <!-- uiTests.ImageTest_HomePage -->
      <class name="uiTests.EndToEndTests_motorcycle">
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:02:48Z" name="setupMethod" finished-at="2022-06-04T10:03:02Z" duration-ms="13335" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="insuranceCalculate(java.lang.Object)[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:02Z" name="insuranceCalculate" data-provider="vehData" finished-at="2022-06-04T10:03:17Z" duration-ms="15700" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Vehicle_List Price=888, Product_startdate=12/12/2022, PriceValidation_Gold=696.00, TC No=1, Vehicle_Annual Mileage=100, Product_insurancesum= 5.000.000,00, Vehicle_Date of Manufacture=09/04/2019, Insurant_Hobby=speeding,Other, SelectOption=Silver, PriceValidation_Ultimate=2,604.00, PriceValidation_Silver=236.00, Vehicle_Make=Honda, Insurant_occupation=Farmer, Vehicle_No of Seats_motorcycle=2, Insurant_LastName=NNN, Product_OptionalProducts=Euro Protection, Vehicle_Enging Performance=666, Insurant_ImageFilePath=??, Vehicle_Model=Motorcycle, Insurant_country=Poland, Insurant_zipcode=62495, Product_damageinsurance=Partial Coverage, TC Name=Verify Insurance Premium for Honda MotorCycle, Vehicle_CylinderCapacity=333, PriceValidation_Platinum=1,367.00, Insurant_FirstName=Patryk, Insurant_birthdate=12/12/1989, Insurant_gender=Male}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insuranceCalculate -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:17Z" name="cleanUp" finished-at="2022-06-04T10:03:18Z" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:18Z" name="setupMethod" finished-at="2022-06-04T10:03:21Z" duration-ms="3227" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="insuranceCalculate(java.lang.Object)[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:21Z" name="insuranceCalculate" data-provider="vehData" finished-at="2022-06-04T10:03:36Z" duration-ms="15492" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Vehicle_List Price=888, Product_startdate=12/12/2025, PriceValidation_Gold=772.00, TC No=2, Vehicle_Annual Mileage=100, Product_insurancesum= 20.000.000,00, Vehicle_Date of Manufacture=09/04/2001, Insurant_Hobby=speeding,Other, SelectOption=Gold, PriceValidation_Ultimate=2,887.00, PriceValidation_Silver=262.00, Vehicle_Make=Volvo, Insurant_occupation=Farmer, Vehicle_No of Seats_motorcycle=2, Insurant_LastName=NNN, Product_OptionalProducts=Euro Protection, Vehicle_Enging Performance=900, Insurant_ImageFilePath=??, Vehicle_Model=Scooter, Insurant_country=Italy, Insurant_zipcode=444061, Product_damageinsurance=Partial Coverage, TC Name=Verify Insurance Premium for Volvo Scooter, Vehicle_CylinderCapacity=900, PriceValidation_Platinum=1,515.00, Insurant_FirstName=Aga, Insurant_birthdate=12/12/1977, Insurant_gender=Female}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insuranceCalculate -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:36Z" name="cleanUp" finished-at="2022-06-04T10:03:37Z" duration-ms="323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:37Z" name="setupMethod" finished-at="2022-06-04T10:03:40Z" duration-ms="3167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="insuranceCalculate(java.lang.Object)[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:40Z" name="insuranceCalculate" data-provider="vehData" finished-at="2022-06-04T10:03:56Z" duration-ms="15679" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Vehicle_List Price=1000, Product_startdate=12/12/2025, PriceValidation_Gold=274.00, TC No=3, Vehicle_Annual Mileage=100, Product_insurancesum= 3.000.000,00, Vehicle_Date of Manufacture=09/04/1989, Insurant_Hobby=speeding,Other, SelectOption=Ultimate, PriceValidation_Ultimate=1,025.00, PriceValidation_Silver=93.00, Vehicle_Make=Ford, Insurant_occupation=Farmer, Vehicle_No of Seats_motorcycle=2, Insurant_LastName=NNN, Product_OptionalProducts=Euro Protection, Vehicle_Enging Performance=100, Insurant_ImageFilePath=??, Vehicle_Model=Moped, Insurant_country=Sweden, Insurant_zipcode=444062, Product_damageinsurance=Partial Coverage, TC Name=Verify Insurance Premium for Ford Moped, Vehicle_CylinderCapacity=100, PriceValidation_Platinum=538.00, Insurant_FirstName=Paulina, Insurant_birthdate=12/12/1956, Insurant_gender=Female}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insuranceCalculate -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.EndToEndTests_motorcycle@226642a5]" started-at="2022-06-04T10:03:56Z" name="cleanUp" finished-at="2022-06-04T10:03:56Z" duration-ms="406" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
      </class> <!-- uiTests.EndToEndTests_motorcycle -->
      <class name="uiTests.ErrorTests_motorcycle">
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:03:56Z" name="setupMethod" finished-at="2022-06-04T10:04:00Z" duration-ms="3639" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="errorMessage_EnginePerformance()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:00Z" name="errorMessage_EnginePerformance" finished-at="2022-06-04T10:04:01Z" duration-ms="933" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- errorMessage_EnginePerformance -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:01Z" name="cleanUp" finished-at="2022-06-04T10:04:01Z" duration-ms="419" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:01Z" name="setupMethod" finished-at="2022-06-04T10:04:04Z" duration-ms="3181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="errorMessage_PayLoadField()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:04Z" name="errorMessage_PayLoadField" finished-at="2022-06-04T10:04:05Z" duration-ms="943" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- errorMessage_PayLoadField -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:05Z" name="cleanUp" finished-at="2022-06-04T10:04:06Z" duration-ms="409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setupMethod()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:06Z" name="setupMethod" finished-at="2022-06-04T10:04:09Z" duration-ms="3408" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupMethod -->
        <test-method signature="verifyModelDropdownOptions()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:09Z" name="verifyModelDropdownOptions" finished-at="2022-06-04T10:04:10Z" duration-ms="872" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Error in Dropdown options compare at Model Dropdown: lists don't have the same size expected [8] but found [5]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Error in Dropdown options compare at Model Dropdown: lists don't have the same size expected [8] but found [5]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:125)
	at org.testng.Assert.assertEquals(Assert.java:372)
	at org.testng.Assert.assertEquals(Assert.java:539)
	at uiTests.ErrorTests_motorcycle.verifyModelDropdownOptions(ErrorTests_motorcycle.java:44)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:663)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:849)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1157)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1200)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1125)
	at org.testng.TestNG.run(TestNG.java:1033)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModelDropdownOptions -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:uiTests.ErrorTests_motorcycle@30ea8c23]" started-at="2022-06-04T10:04:10Z" name="cleanUp" finished-at="2022-06-04T10:04:10Z" duration-ms="304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
      </class> <!-- uiTests.ErrorTests_motorcycle -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
